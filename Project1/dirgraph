#!/bin/sh

# VUT FIT IPP 2018/2019 project.
#
# IOS shell source code.
#
# @author Pavol Gumancik <xguman01@stud.fit.vutbr.cz>

export POSIXLY_CORRECT=yes

export val0=0
export val1=0
export val2=0
export val3=0
export val4=0
export val5=0
export val6=0
export val7=0
export val8=0

export Rdir=$PWD    # Path to file/file
export norm=false   # Variable for normalize output for terminal
export ignore=false
export ignoreList=""

### Dividing diagram  ###
div(){
  val0=$(( val0/2 ))
  val1=$(( val1/2 ))
  val2=$(( val2/2 ))
  val3=$(( val3/2 ))
  val4=$(( val4/2 ))
  val5=$(( val5/2 ))
  val6=$(( val6/2 ))
  val7=$(( val7/2 ))
  val8=$(( val8/2 ))
}

### Recursive set of Histogram Width  ###
cutGr()
{
  if [ $val0 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val1 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val2 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val3 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val4 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val5 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val6 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val7 -gt $1 ]; then
    div
    cutGr $1
  elif [ $val8 -gt $1 ]; then
    div
    cutGr $1
  else
    return
  fi
}

###  Check if are validity of arguments ###
checkArgs()
{
  for i in "$@"
  do
    if [ $ignore = "true" ]; then
      ignore=false                  # Discard ignore state
      ignoreList=$ignoreList" "$i   # Put dir name in ignore list

    elif [ $i = "-n" ]; then
      norm=true                     # Set normalize state

    elif [ $i = "-i" ]; then
      ignore=true                   # Set ignore state in next step

    else
      if [ -d "$i" ];then
        Rdir=$(realpath $i)         # Find path to given directory

      else                          # Argument is not parameter or directory
        echo "Invalid argument: $i." 1>&2
      fi
    fi
  done
}

### Set length of histogram ###
normalize()
{
  if [ $norm ]; then
    if [ -t 1 ] ; then      # Check activity of terminal
      width=$(tput cols)    # Find width of terminal
      width=$(( width-13 )) # Width - (base+1)
      cutGr $width
    else
      width=66              # Standard Width (79-13)
      cutGr $width
    fi
  fi
}

### Find size of each file ###
size()
{
  size=$(($(wc -c < "$1")+0))           # get size in byts

  if [ $size -lt 100 ]; then            # <100 B
    val0=$(( val0+1 ))
  elif [ $size -lt 1024 ]; then         # <1 KiB
    val1=$(( val1+1 ))
  elif [ $size -lt 10240 ]; then        # <10 KiB
    val2=$(( val2+1 ))
  elif [ $size -lt 102400 ]; then       #  <100 KiB
    val3=$(( val3+1 ))
  elif [ $size -lt 1048576 ]; then      # <1 MiB
    val4=$(( val4+1 ))
  elif [ $size -lt 10485760 ]; then     #  <10 MiB
    val5=$(( val5+1 ))
  elif [ $size -lt 104857600 ]; then    # <100 MiB
    val6=$(( val6+1 ))
  elif [ $size -lt 1073741824 ]; then   #  <1 GiB
    val7=$(( val7+1 ))
  else                                  #>=1 GiB
    val8=$(( val8+1 ))
  fi
}

### Loop trought directorys and count them ###
crossWalk()
{
  for file in $1/* ;                # Search in deep
  do
    if [ -d "$file" ];then          # Directory has been found
      cntDir=$((cntDir+1))

      for iDir in $ignoreList; do   # Ceck if is directory in ignore list
        if [ $iDir = $file ]; then
          continue
        fi
      done
      crossWalk $file

    elif [ -f "$file" ];then        # File has been found
      cntFile=$((cntFile+1))

    size $file                      # Set file sise
    fi
  done
}

### Print histogram
histogram()
{
  i=0
  while [ $i -lt $1 ];
  do
    echo  "#" | tr -d '\n'
    i=$((i+1))
  done
}
### Print base for histogram ###
base()
{
  echo  "  <100 B  : " | tr -d '\n'
    histogram $val0
    echo ""
  echo  "  <1 KiB  : " | tr -d '\n'
    histogram $val1
    echo ""
  echo  "  <10 KiB : " | tr -d '\n'
    histogram $val2
    echo ""
  echo  "  <100 KiB: " | tr -d '\n'
    histogram $val3
    echo ""
  echo  "  <1 MiB  : " | tr -d '\n'
    histogram $val4
    echo ""
  echo  "  <10 MiB : " | tr -d '\n'
    histogram $val5
    echo ""
  echo  "  <100 MiB: " | tr -d '\n'
    histogram $val6
    echo ""
  echo  "  <1 GiB  : " | tr -d '\n'
    histogram $val7
    echo ""
  echo  "  >=1 GiB : " | tr -d '\n'
    histogram $val8
    echo ""
}

######################################################
##                      MAIN                        ##
######################################################

cntDir=0   #dir=$((dir+1))
cntFile=0

checkArgs "$@"
crossWalk $Rdir

# Print skelet of output
echo "Root directory: $Rdir"
echo "Directories: $cntDir"
echo "All files: $cntFile"
echo "File size histogram:"

normalize $norm #normalize structure
base            #print histogram
